<?php

/**
 * AdminOnSteroids
 * Various admin tweaks
 *
 * @author Roland Toth (tpr)
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */
class AdminOnSteroids extends WireData implements Module, ConfigurableModule {

    static $configData;
    public $adminTheme;
    protected $editedPage;
    protected $PageListThumbs_items;
    protected $settingsFile;
    protected $htmlClasses;
    protected $allRoles;
    protected $enabledSubmodules;

    public static function getModuleInfo() {
        return array(
            'title'     => 'AdminOnSteroids',
            'class'     => 'AdminOnSteroids',
            'version'   => 96,
            'summary'   => __('Various ProcessWire admin tweaks to boost productivity'),
            'author'    => 'Roland Toth',
            'autoload'  => 'template=admin',
            'href'      => 'https://processwire.com/talk/topic/13389-adminonsteroids/',
            'icon'      => 'medkit',
            'requires'  => 'ProcessWire>=2.8.0, PHP>=5.3.8',
            'singular'  => true,
            'permanent' => false
        );
    }

    public function __construct() {
        $this->settingsFile = __DIR__ . "/settings.php";
    }

    /**
     * Default configuration for module
     *
     */
    static public function getDefaultData() {
        return array(
            'enabledSubmodules'            => array(
                'AdminColumns',
                'AdminLangSwitcher',
                'AutosizeTextareas',
                'AsmTweaks',
                'CKEaddons',
                'DeselectRadios',
                'noAnim',
                'FileFieldTweaks',
                'FieldAndTemplateEditLinks',
                'FocusInputOnLangTabSwitch',
                'LangTabHotkeySwitcher',
                'AdminTweaks',
                'NavItems',
                'RenoTweaks',
                'ListerTweaks',
                'LongClickDuration',
                'HoverDropdown',
                'Hotkeys',
                'InputfieldURLChecker',
                'PageListThumbs',
                'PageListUnselect',
                'PageListTweaks',
                'PagePreviewBtn',
                'ModuleTweaks',
                'Tooltips',
                'TabIndex'
            ),
            'enabled'                      => 1,
            'restore'                      => '',
            'AdminStyle'                   => '',
            'AdminScript'                  => '',
            'CKEStyle'                     => '',
            'CKEScript'                    => '',
            'NavItems'                     => 1,
            'CKEaddons_plugins'            => array(
                'autogrow',
                'justify',
                'keystrokes'
            ),
            'CKEaddons_skin'               => 'lightwire',
            'CKEaddons_enabledFields'      => '',
            'DeselectRadios'               => array(
                'adminOnly'
            ),
            'AsmTweaks'                    => array(
                'asmCollapse',
                'fieldMiddleEdit'
//                'asmLeftX'
            ),
            'FileFieldTweaks'              => array(
                'filterbox',
                'downloadAssetButton',
                'imgSelectTitle'
            ),
            'FocusInputOnLangTabSwitch'    => array(
                'focus'
            ),
            'Hotkeys'                      => array(
                'save',
                'focusSearch',
                'breadcrumbTweaks'
            ),
            'ListerTweaks'                 => '',
            'ListerTweaks_find'            => array(
                'title',
                'template',
                'parent',
                'modified',
                'modified_users_id'
            ),
            'ListerTweaks_users'           => array(
                'name',
                'email',
                'roles'
            ),
            'LongClickDuration'            => 600,
            'Misc'                         => array(
                'removeAllFieldsBtn',
                'homeOpenNewTab',
                'dataTableFilter',
                'transFilter',
                'centerLogin'
            ),
            'ModuleTweaks'                 => array(
                'loadCollapsedModuleInfos',
                'flatModules',
                'moduleCompact',
                'moduleFilter',
//                'moduleModal'
            ),
            'NavItems_pages'               => array(),
            'NavItems_custom'              => array(),
            'Tooltips'                     => array(
                'tooltipDesc',
                'tooltipNotes'
//                'tooltipOverlay'
            ),
            'IUC_mode'                     => array(
                'button'
            ),
            'IUC_buttonPosition'           => 'button-left',
            'IUC_target'                   => 'pw-blank',
            'IUC_forceHttp'                => 1,
            'IUC_enabledTemplates'         => array(),
            'IUC_enabledFields'            => array(),
            'FocusInputOnLangTabSwitchCKE' => array(
                'focus'
            ),
            'PagePreviewBtn'               => 'pw-blank',
            'FieldAndTemplateEditLinks'    => 'pw-blank',
            'PageListThumbs'               => array(),
            'PageListThumbs_style'         => 'circle',
            'PageListThumbs_items'         => '',
            'PageListThumbs_options'       => array(
                'alignright',
                'addlink'
            ),
            'PageListTweaks'               => array(
                'pListIDs',
                'highlightRows'
            ),
            'RenoTweaks'                   => array(
//                'sbSingleClickHeads',
                'headSticky',
//                'headStickyCompact',
                'miniScrollSb',
//                'miniScrollMain',
                'sbSticky',
                'stickyCKEBar',
//                'sbAutoHide',
                'sbItemsVisible',
//                'sbQuickLinksHide',
//                'sbItemsInline',
//                'sbItemsRow',
                'headBtnToTitle',
                'openSearch',
                'pListCompact',
                'noticeLeftX',
                'hoverTopSubmenus'
            ),
            'AdminTweaks'                  => array(
                'headSticky',
                'pListFullRowHover',
                'wide'
            )
        );
    }

    public function __toString() {
        return __CLASS__;
    }

    protected function _installColumnBreakField() {

        // install AdminColumns field
        // use skipLabel and collapsed to avoid visiblity if AOS is uninstalled (no need to remove from templates)
        if ($this->fields->get('aos_column_break')) {
            return;
        }

        $field = new Field();
        $field->type = $this->modules->get("FieldtypeText");
        $field->name = 'aos_column_break';
        $field->label = '';
        $field->skipLabel = true;
        $field->collapsed = Inputfield::collapsedYesLocked;
        $field->tags = '-aos';
//        $field->columnWidth = 67;
        $field->save();

        $this->message(__('Added "aos_column_break" field for AdminColumns submodule.', __FILE__));
    }


    public function ___install() {

        // apply default module settings on install or use settings.php

        $settings = null;
        @$previousSettings = file_get_contents($this->settingsFile);

        if ($previousSettings) {

            $previousSettings = json_decode($previousSettings, true);

            // check if "restore" is enabled
            if (isset($previousSettings['restore']) && $previousSettings['restore'] == 1) {
                $settings = $previousSettings;
            }
        }

        if (is_null($settings)) {
            $settings = self::getDefaultData();
        }

        $this->wire('modules')->saveModuleConfigData($this, $settings);

        $this->_installColumnBreakField();
    }


    public function ___uninstall() {
        // save current config to settings.php
        $settings = array_filter($this->modules->getModuleConfigData($this));
        @file_put_contents($this->settingsFile, json_encode($settings));
    }


    public function addClasses(HookEvent $event) {

        $allowedHtmlClasses = array(
            'AdminThemeDefault',
            'hoverTopSubmenus',
            'asmCollapse',
            'asmLeftX',
            'centerLogin',
            'filterbox',
            'flatModules',
            'headBtnToTitle',
            'headSticky',
            'headStickyCompact',
            'HoverDropdown',
            'moduleCompact',
            'moduleModal',
            'noAnim',
            'noticeLeftX',
            'openSearch',
            'pListCompact',
            'pListFullRowHover',
            'PageListThumbs',
            'highlightRows',
            'sbAutoHide',
            'sbItemsInline',
            'sbItemsRow',
            'sbItemsVisible',
            'sbQuickLinksHide',
            'sbSticky',
            'tooltipDesc',
            'tooltipNotes',
            'tooltipOverlay',
            'wide'
        );

        foreach ($this->enabledSubmodules as $submodule) {
            $this->addDOMClass($submodule);

            if (isset(self::$configData[$submodule]) && is_array(self::$configData[$submodule])) {
                foreach (self::$configData[$submodule] as $item) {
                    $this->addDOMClass(array($submodule, $item));
                }
            }
        }

        $html = $event->return;

        // add empty class to html (default theme has no html class but check always)
        if (!preg_match("/<html(.+)class=(.+)>/i", $html)) {
            $html = str_replace('<html', '<html class=""', $html);
        }

        if ($this->adminTheme == 'AdminThemeDefault') {
            $this->htmlClasses[] = 'AdminThemeDefault';
        }

        $htmlClasses = implode(' ', array_intersect($allowedHtmlClasses, $this->htmlClasses));

        $event->return = preg_replace("/<html(.+)class=('|\")(.*?)('|\")/i", "<html$1class=$2aos $3 " . $htmlClasses . "$4", $html);
    }


    public function addDOMClass($class) {

        if (is_array($class)) {

            if (
                ($this->adminTheme == 'AdminThemeDefault' && $class[0] == 'RenoTweaks') ||
                ($this->adminTheme == 'AdminThemeReno' && $class[0] == 'AdminTweaks')
            ) {
                return false;
            }

            if (is_array($class[1])) {
                return $this->addDOMClass($class[0]);
            }

            if (in_array($class[1], self::$configData[$class[0]])) {
                $class = $class[1];
            } else {
                return '';
            }
        }

        $this->htmlClasses[] = $class;
    }


    public function ___modifyConfigData($data) {
        return $data;
    }


    public function init() {

        // return json template edit link by template name (for pagelists)
//        if ($this->input->get->getTemplateEditLink) {
//            header('Content-Type: application/json');

//            $templateName = $this->input->get->getTemplateEditLink;

//            if ($this->templates->get('name=' . $templateName)) {

//                $template = $this->templates->get('name=' . $templateName);

//                $target = isset($this->FieldAndTemplateEditLinks) ? $this->FieldAndTemplateEditLinks : '';

//                $target = ($target === 'pw-panel') ? $target . ' pw-panel-reload' : $target;

//                $templateEditUrl  = $this->config->urls->admin . 'setup/template/edit?id=' . $template->id;
//                $templateEditLink = '<a href="' . $templateEditUrl . '" class="aos_EditTemplate ' . $target . '" target="_blank">' . $template->name . ' <i class="fa fa-pencil"></i></a>';

//                echo json_encode($templateEditLink);
//            }
////            $this->halt();
//            exit;
//        }


        $editedPageId = $this->sanitizer->int($this->config->input->get->id);

        if (!empty($editedPageId) && is_numeric($editedPageId) && $this->pages->get($editedPageId)) {
            $this->editedPage = $this->pages->get($editedPageId);
        } else {
            $this->editedPage = null;
        }

        $configData = $this->modifyConfigData(
            $this->modules->getModuleConfigData($this),
            $this->editedPage ? $this->editedPage : false
        );

        self::$configData = $configData;


        if ($this->user->isSuperUser()) {

            if ($this->input->toggle == 1) {
                $configData['enabled'] = ($this->enabled == 1) ? 0 : 1;
                $this->modules->saveModuleConfigData($this, $configData);

                $this->session->redirect($_SERVER['HTTP_REFERER']);

                $this->halt();
            }


            $this->addHookAfter("ProcessPageListRender::getPageActions", function ($event) {

                $page = $event->arguments("page");
                $actions = $event->return;
                $template = $page->template;

                $templateEditUrl = $this->config->urls->httpAdmin . 'setup/template/edit?id=' . $template->id;

                $actions['editTemplate'] = array(
                    // use "Edit" to enable built-in long-click feature
                    'cn'   => 'Edit',
//                    'cn'   => 'Edit PageListActionEdit aos',
                    'name' => '#' . $template->name,
                    //'url'  => $templateEditUrl . '&target=blank'
                    //'url'  => $templateEditUrl . '&modal=1'
                    'url'  => $templateEditUrl
                );

                $event->return = $actions;
            });


            $this->addHookAfter('AdminTheme::getExtraMarkup', function ($event) {

                $parts = $event->return;

                $enabledText = __('Disable', __FILE__) . ' AdminOnSteroids';   // Disable AdminOnSteroids
                $disabledText = __('Enable', __FILE__) . ' AdminOnSteroids';   // Enable AdminOnSteroids

                $linkStyle = 'style="opacity: 0.75; color: inherit !important; margin-left: 0; display: inline-block; padding: 4px 0; margin-right: 1px;"';
                $mouseover = 'onmouseover="this.style.textDecoration=\'underline\'" onmouseout="this.style.textDecoration=\'none\'"';

                $modulePage = $this->config->urls->admin . 'module/edit?name=AdminOnSteroids';
                $configLink = '<a href="' . $modulePage . '" ' . $linkStyle . ' title="' . __('Configure module', __FILE__) . '"><i class="fa fa-cog"></i></a>';

                $parts['footer'] = $parts['footer'] . '<p style="opacity:1;"><a href="' . $modulePage . '&toggle=1" class="aos_toggle" ' . $linkStyle . '><i class="fa fa-medkit"></i> <span ' . $mouseover . '>' . ($this->enabled ? $enabledText : $disabledText) . '</span></a> ' . $configLink . '</p>';

                $event->return = $parts;
            });
        }

        $this->allRoles = array();

        foreach ($this->roles as $role) {
            if ($role->name == 'guest') {
                continue;
            }
            $this->allRoles[$role->name] = $role->name;
        }

        if (!$this->enabled) {
            return;
        }

        $enabledSubmodules = self::$configData['enabledSubmodules'];

        // remove submodules where user's role is not allowed

        if (!$this->user->isSuperUser()) {
//        $userRoles = $this->user->roles->explode('name');
            $userRoles = $this->user->roles->name(',');

            // remove 'guest' role
            $userRoles = str_replace(array('guest', ',,'), array('', ','), $userRoles);
            $userRoles = trim($userRoles, ',');
            $userRoles = explode(',', $userRoles);


            foreach ($enabledSubmodules as $submodule) {

                $submoduleRoleField = $submodule . 'Roles';

                // continue if no roles have been set in module config (empty means allow all)
                if (empty($this->$submoduleRoleField)) {
                    continue;
                }

//            remove from array (by value) if there isn't a matching role
                if (count(array_intersect($this->$submoduleRoleField, $userRoles)) == 0) {
                    if (($key = array_search($submodule, $enabledSubmodules)) !== false) {
                        unset($enabledSubmodules[$key]);
                    }
                }
            }
        }

        $this->enabledSubmodules = $enabledSubmodules;

        // AdminLangSwitcher
        $subModule = 'AdminLangSwitcher';

        // add to init() to change early
        if (in_array($subModule, $enabledSubmodules)) {
            if (isset($_COOKIE["aos_lang_id"])) {
                $lang_id = $_COOKIE["aos_lang_id"];
                $this->user->language = $lang_id;
            }
        }
    }


    public function ready() {

        $root = $this->config->urls->siteModules . __CLASS__;
        $styles = $this->config->styles;
        $scripts = $this->config->scripts;
        $templatesPath = $this->config->paths->templates;
        $moduleInfo = $this->getModuleInfo();
        $timestamp = $moduleInfo['version'] . '_' . date('YmdH');

        $styles->prepend($root . '/' . __CLASS__ . '.css?ts=' . $timestamp);

        if (!$this->enabled) {
            return false;
        }

        // set title to who in browser tab instead 'Modules'
        // bug: renames sidebar item "Modules" too
//        if ($this->wire('input')->get('name') == 'AdminOnSteroids') {
//            $this->wire('page')->title = 'AdminOnSteroids';
//        }

        // login page doesn't some stuff
        if ($this->page->id != 23) {
            $scripts->add($root . '/' . __CLASS__ . '.js?ts=' . $timestamp);

            // always load modal js
            $this->modules->get('JqueryUI')->use('modal');
        }

        $configData = self::$configData;
        $defaultData = self::getDefaultData();

        $enabledSubmodules = $this->enabledSubmodules;

//        echo '<pre>'; var_dump(count($enabledSubmodules)); echo '</pre>';

        $this->htmlClasses = array();
        $jsFiles = array();
        $cssFiles = array();

        // if there's only the default admin theme, $user->admin_theme is not available
        $this->adminTheme = $this->user->admin_theme ? $this->user->admin_theme : $this->config->defaultAdminTheme;

        $this->PageListThumbs_items = array();

        $this->addHookAfter('Page::render', $this, 'addClasses');

        // AdminColumns
        $subModule = 'AdminColumns';
        if (in_array($subModule, $enabledSubmodules)) {
            // make sure field is available
            $this->_installColumnBreakField();
            $this->addHookAfter('ProcessPageEdit::buildFormContent', $this, 'setupAdminColumns');
        }

        // AdminLangSwitcher
        $subModule = 'AdminLangSwitcher';
        if (in_array($subModule, $enabledSubmodules)) {
            $this->addHookAfter('AdminTheme::getExtraMarkup', $this, 'addAdminLangSwitcher');
        }

        //NavItems
        $subModule = 'NavItems';

        if (in_array($subModule, $enabledSubmodules)) {
            $this->addHookAfter('Page::render', $this, 'addNavItems');
        }

        //AutosizeTextareas
        $subModule = 'AutosizeTextareas';
        if (in_array($subModule, $enabledSubmodules)) {
            $jsFiles[] = $root . '/' . $subModule . '/Autosize.js';
            $jsFiles[] = $root . '/' . $subModule . '/' . $subModule . '.js';
        }

        //FieldAndTemplateEditLinks
        $subModule = 'FieldAndTemplateEditLinks';
        if (in_array($subModule, $enabledSubmodules)) {

            if ($this->user->hasRole('superuser')) {
                if (!is_null($this->editedPage)) {

                    // add edit field link only if the edited page is not a special page (eg. admin)
                    if ($this->process == 'ProcessPageView' && $this->editedPage->template && $this->editedPage->template->flags === 0) {
                        $this->addHookAfter('Page::render', $this, 'addTemplateEditLink');

//                    $this->addHookAfter('ProcessPageListRenderJSON::getPageLabel', $this, 'addTemplateLinkPageList');

                        $this->addHookAfter('Inputfield::render', $this, 'addFieldEditLinks');
                        $this->addHookAfter('Inputfield::renderValue', $this, 'addFieldEditLinks');
                    }
                }
            } else {
                // remove the submodule entirely if not superuser
                if (($key = array_search($subModule, $enabledSubmodules)) !== false) {
                    unset($enabledSubmodules[$key]);
                }
            }
        }


        //DeselectRadios
        $subModule = 'DeselectRadios';
        if (in_array($subModule, $enabledSubmodules)) {
            $jsFiles[] = $root . '/' . $subModule . '/' . $subModule . '.js';
        }


        //InputfieldURLChecker
        $subModule = 'InputfieldURLChecker';
        if (in_array($subModule, $enabledSubmodules)) {

            $jsFiles[] = $root . '/' . $subModule . '/' . $subModule . '.js';
//            $cssFiles[] = $root . '/' . $subModule . '/' . $subModule . '.css';

            $this->addHookAfter('InputfieldURL::renderValue', $this, 'addIUCLink');
            $this->addHookAfter('InputfieldURL::render', $this, 'addIUCLink');
            $this->addHookAfter('InputfieldPageAutocomplete::render', $this, 'addIUCLink');
        }


        //AsmTweaks
        $subModule = 'AsmTweaks';
        if (in_array($subModule, $enabledSubmodules)) {
            $jsFiles[] = $root . '/' . $subModule . '/' . $subModule . '.js';
        }

        //PageListTweaks
        $subModule = 'PageListTweaks';
        if (in_array($subModule, $enabledSubmodules)) {

            if ($this->user->isSuperUser()) {

                if (in_array('pListIDs', $configData[$subModule])) {
                    $this->addHookAfter("ProcessPageListRender::getPageLabel", $this, 'addPageListIDs');
                }

                // add delete button to pagelist items (bypass trash)
                if (in_array('deleteBtn', $configData[$subModule])) {
                    $this->addHookAfter("ProcessPageListActions::getExtraActions", function (HookEvent $event) {

                        $page = $event->arguments('page');

                        // do not allow for pages having children
                        if ($page->numChildren > 0) {
                            return false;
                        }

                        if (!$page->trashable() || !$this->user->isSuperUser()) {
                            return false;
                        }

                        $actions = array();
                        $adminUrl = $this->wire('config')->urls->admin . 'page/';
                        $icon = '';

                        $actions['delete_permanently'] = array(
                            'cn'   => 'Delete aos',
                            'name' => $icon . 'Delete',
                            'url'  => $adminUrl . '?action=delete&id=' . $page->id,
                            'ajax' => true
                        );

                        $event->return += $actions;
                    });

                    $this->addHookAfter('ProcessPageListActions::processAction', function (HookEvent $event) {

                        $page = $event->arguments(0);
                        $action = $event->arguments(1);

                        // do not allow for pages having children
                        if ($page->numChildren > 0) {
                            return false;
                        }

                        if ($action == 'delete_permanently') {

//					        $page->setAndSave('title', $page->title . '-hello');
//                          $page->trash();
                            $page->delete();

                            $event->return = array(
                                'action'          => $action,
                                'success'         => true,
                                'page'            => $page->id,
                                'updateItem'      => $page->id,
                                'message'         => 'Deleted permanently!',
                                'remove'          => true,
                                'refreshChildren' => false
                            );
                        }
                    });
                }
            }
        }


        // ListerTweaks

        $subModule = 'ListerTweaks';
        // default columns: only add hook if there's no bookmark requested
        if (in_array($subModule, $enabledSubmodules) && (!isset($_SERVER['HTTP_REFERER']) || strpos($_SERVER['HTTP_REFERER'], '?bookmark=') === false)) {
            $this->addHookBefore('ProcessPageLister::execute', function ($event) {

                $lister = $event->object;
                $columns = array();
                $pageID = $this->page->id;
                $defaultData = self::getDefaultData();

                // 1007: Find
                // 29: Users
                if ($pageID == 1007) {
                    $listerType = 'ListerTweaks_find';
                } elseif ($pageID == 29) {
                    $listerType = 'ListerTweaks_users';
                }

                $defaultFields = $defaultData[$listerType];

                if (!empty(self::$configData[$listerType])) {
                    foreach (self::$configData[$listerType] as $ff) {
                        if ($ff == '[DEFAULTS]') {
                            $columns += $defaultFields;
                            continue;
                        }
                        $columns[] = $ff;
                    }
                }

                $lister->sessionSet('columns', (empty($columns)) ? $defaultFields : $columns);
            });
        }


        //RenoTweaks
        $subModule = 'RenoTweaks';
        if (in_array($subModule, $enabledSubmodules)) {
            if (in_array('headSticky', $configData[$subModule])) {
                if (in_array('miniScrollSb', $configData[$subModule]) || in_array('miniScrollMain', $configData[$subModule])) {
                    $jsFiles[] = $root . '/lib/perfect-scrollbar/js/perfect-scrollbar.min.js';
                }
            }
        }

        //FocusInputOnLangTabSwitch
        $subModule = 'FocusInputOnLangTabSwitch';
        if (in_array($subModule, $enabledSubmodules)) {
            $jsFiles[] = $root . '/' . $subModule . '/' . $subModule . '.js';
        }

        //Hotkeys
        $subModule = 'Hotkeys';
        if (in_array($subModule, $enabledSubmodules)) {

            // add breadcrumb tweaks
            if (in_array('breadcrumbTweaks', $configData[$subModule])) {

                $page = $this->pages->get('has_parent!=2, id=' . $this->input->get->id);

                if ($page->id) {
                    $homepage = $this->wire->pages->get(1);
                    $breadcrumbUrls = array();

                    foreach ($this->wire->pages->get(1)->and($page->parentsUntil(1)) as $p) {
                        $breadcrumbUrls[] = array(
                            'url'     => $p->viewable() ? $p->httpUrl : null,
                            'editUrl' => $p->editable() ? rtrim($homepage->httpUrl, '/') . $p->editUrl : null
                        );
                    }

                    // add to js config (head)
                    $this->config->js("AOS_breadcrumbs", $breadcrumbUrls);
                }
            }

            $jsFiles[] = $root . '/' . $subModule . '/' . $subModule . '.js';
        }

        //LangTabHotkeySwitcher
        $subModule = 'LangTabHotkeySwitcher';
        if (in_array($subModule, $enabledSubmodules)) {
            $jsFiles[] = $root . '/' . $subModule . '/' . $subModule . '.js';
        }

        //LongClickDuration
        $subModule = 'LongClickDuration';
        if (in_array($subModule, $enabledSubmodules)) {

            $LongClickDuration = (int)$configData['LongClickDuration'];

            //do not allow lower value than default 600
            $LongClickDuration = ($LongClickDuration < $defaultData['LongClickDuration']) ? $defaultData['LongClickDuration'] : $LongClickDuration;

            $configSettings['LongClickDuration'] = $LongClickDuration;
        } else {
            // need to set default value explicitly
            $configSettings['LongClickDuration'] = $defaultData['LongClickDuration'];
        }

        // remove Tooltips if it's superuser only and user is not superuser
//        if (isset($configData['Tooltips']) && (in_array('superuseronly', $configData['Tooltips']) && !$this->user->isSuperUser())) {
//            // delete from array by value
//            if (($key = array_search('Tooltips', $enabledSubmodules)) !== false) {
//                $configData['enabledSubmodules'][$key] = 'Tooltips_disabled';
//                unset($configData['Tooltips']);
//            }
//        }

        $subModule = 'ModuleTweaks';
        if (in_array($subModule, $enabledSubmodules)) {

            if (in_array('loadCollapsedModuleInfos', $configData[$subModule])) {
                // Load module info fields collapsed
                $this->addHookAfter('InputfieldMarkup::render', function ($event) {
                    $field = $event->object;
                    if ($field->id == 'ModuleInfo') {
                        $field->addClass('InputfieldStateCollapsed');
                    }
                });
            }
            
            if (in_array('moduleBrowserTitle', $configData[$subModule])) {
                // set browser title to module name
                if($this->page->process && $this->page->process == 'ProcessModule') {
                    $this->wire('processBrowserTitle', $this->input->get('name'));
                }
            }
        }

        $subModule = 'PageListThumbs';
        if (in_array($subModule, $enabledSubmodules)) {
            $this->addHookAfter('ProcessPageListRender::getPageLabel', $this, 'addPageListThumb');
        }

        $subModule = 'PageListUnselect';
        if (in_array($subModule, $enabledSubmodules)) {
            $this->addHookAfter('InputfieldPageListSelect::render', $this, 'addPageListUnselectButtons');
        }

        $subModule = 'FileFieldTweaks';
        if (in_array($subModule, $enabledSubmodules)) {
            if (in_array('downloadAssetButton', $configData[$subModule])) {
                $this->addHookAfter('InputfieldImage::renderButtons', $this, 'addDownloadAssetLink');
                $this->addHookAfter('InputfieldFile::renderItem', $this, 'addDownloadAssetLink');
            }
            if (in_array('imgSelectTitle', $configData[$subModule])) {
                $this->addHookAfter('ProcessPageEditImageSelect::execute', function ($event) {
                    $event->return .= "<script>if($('ul#select_images').length && window.addImageSelectLabels) addImageSelectLabels($('ul#select_images'));</script>";
                });
            }
        }

        // add translations
        $configData['loc'] = array(
            'save'                     => __('Save', __FILE__),
            'save_and_exit'            => __('Save + Exit', __FILE__),
            'save_and_reload'          => __('Save + Reload', __FILE__),
            'remove_all_fields'        => __('Remove All', __FILE__),
            'check_all'                => __('Check all', __FILE__),
            'removing'                 => __('Removing...', __FILE__),
            'cancel'                   => __('Cancel', __FILE__),
            'delete_action'            => __('Delete', __FILE__),
            'permanent_delete_confirm' => __('Delete page permanently?', __FILE__),
            'untitled'                 => __('Untitled', __FILE__)
        );

        // add modified enabledSubmodules to JS config (modified by roles)
        // note: array_values is used to have values-only array in JS
        $configData['enabledSubmodules'] = array_values($enabledSubmodules);
        $configData['aosUrl'] = $this->config->urls->AdminOnSteroids;
        $configData['aosModuleUrl'] = $this->config->urls->admin . 'module/edit?name=AdminOnSteroids';

        $rootPath = rtrim($this->config->paths->root, '/');
        $rootUrl = rtrim($this->config->urls->root, '/');

        // do not add JS to page on login page
        if ($this->page->id != 23) {

            // custom CKEaddons config js and css

            $ckeCSS = !empty($configData['CKEStyle']) ? $rootUrl . '/' . ltrim($configData['CKEStyle'], '/') : $this->config->urls->templates . 'cke.css';
            $ckeJS = !empty($configData['CKEScript']) ? $rootUrl . '/' . ltrim($configData['CKEScript'], '/') : $this->config->urls->templates . 'cke.js';

            if (file_exists($rootPath . $ckeCSS)) {
                $configData['customCKEStyle'] = $ckeCSS;
            }
            if (file_exists($rootPath . $ckeJS)) {
                $configData['customCKEScript'] = $ckeJS;
            }

            // add css and js files
            foreach ($jsFiles as $jsFile) {
                $scripts->add($jsFile);
            }
            foreach ($cssFiles as $cssFile) {
                $styles->add($cssFile);
            }

            // write module js config to page
            $this->config->js("AdminOnSteroids", json_encode($configData));
        }

        // add admin.js and admin.css
        // use values set in module settings or try templates/admin.css & js
        $adminCSS = !empty($configData['AdminStyle']) ? $rootUrl . '/' . ltrim($configData['AdminStyle'], '/') : $this->config->urls->templates . 'admin.css';
        $adminJS = !empty($configData['AdminScript']) ? $rootUrl . '/' . ltrim($configData['AdminScript'], '/') : $this->config->urls->templates . 'admin.js';

        if (file_exists($rootPath . $adminCSS)) {
            $styles->add($adminCSS);
        }
        if (file_exists($rootPath . $adminJS)) {
            $scripts->add($adminJS);
        }
    }


    /**
     * Method to disable submodule (in Hooks).
     *
     * @param $submoduleName string
     * @param $configData    array
     *
     * @return array
     */
    public static function disableSubmodule($submoduleName, $configData) {

        $enabledSubmodules = $configData['enabledSubmodules'];
        $key = array_search($submoduleName, $enabledSubmodules);


        if ($key !== false) {
            unset($enabledSubmodules[$key]);
            $configData['enabledSubmodules'] = array_values($enabledSubmodules);
        }

        return $configData;
    }


    /**
     * Method to remove tweak from submodule (in Hooks).
     *
     * @param $tweakName     string
     * @param $submoduleName string
     * @param $configData    array
     *
     * @return array
     */
    public static function disableTweak($submoduleName, $tweakName, $configData) {

        if (isset($configData[$submoduleName])) {
            $submodule = $configData[$submoduleName];

            $key = array_search($tweakName, $submodule);

            if ($key !== false) {
                unset($submodule[$key]);
                $configData[$submoduleName] = array_values($submodule);
            }
        }

        return $configData;
    }


    public function addPageListIDs(HookEvent $event) {
        $page = $event->arguments("page");
        $event->return = $event->return . '<sup class="pageId">' . $page->id . '</sup>';
    }


    public function addNavItems(HookEvent $event) {
        $items = "";
        $NavItems_pages = isset(self::$configData['NavItems_pages']) ? self::$configData['NavItems_pages'] : false;
        $NavItems_custom = isset(self::$configData['NavItems_custom']) ? self::$configData['NavItems_custom'] : false;
        $rootUrl = $this->pages->get(2)->url . 'page/?id=';

        // process pagelist select items
        if ($NavItems_pages) {

            foreach ($this->pages->getById($NavItems_pages) as $p) {

                $url = "";
                $editUrl = "";
                $activeClass = "";
                $inputId = $this->input->get->id;

                /**
                 * 7: Trash
                 * 21: Modules
                 * 304: Profile
                 */
                if ($p->id == 304) {

                    if ($this->user->hasPermission('profile-edit')) {
                        $url = $this->pages->get($p->id)->url;
                    } else {
                        continue;
                    }

                } else if ($p->id == 21) {

                    if ($this->user->isSuperUser()) {
                        $url = $this->config->urls->admin . 'module';
                    }

                } else if ($p->id == 7) {

                    if ($p->listable()) {
                        $url = $this->config->urls->admin . 'page/?id=' . $p->id;
                        $editUrl = false;
                    } else {
                        continue;
                    }

                } else {

                    if (!$p->listable()) {
                        continue;
                    }

                    $url = $rootUrl . $p->id;
                }

                if ($url == "") {
                    continue;

                } else {
                    $pageId = $p->id;

                    /**
                     *  add active class only if:
                     *
                     * navItem id == GET id
                     * navItem id == current page id
                     * navItem id !== GET id and edited page is child page of the page
                     */

                    if (
                        $pageId == $inputId ||
                        $pageId == $this->page->id ||
                        //                                ($pageId == $inputId && $this->editedPage && $this->editedPage->parent() && $pageId == $this->editedPage->parent()->id)
                        (!in_array($inputId, $NavItems_pages) && $pageId !== 1 && $this->editedPage && $this->editedPage->parent() && $pageId == $this->editedPage->parent()->id)
                    ) {
                        $activeClass = ' current';
                    }
                    $listUrl = '<a href="' . $url . '" class="page-list' . $activeClass . '">' . $p->title . '</a>';
                }

                $editUrl = $editUrl === false ? '' : $p->editable() ? '<a href="' . $p->editUrl() . '" class="page-edit"><i class="fa fa-pencil"></i></a>' : '';

                $firstClass = empty($items) ? ' first' : '';

                $items .= '<li class="navItem' . $firstClass . '">' . $listUrl . ' ' . $editUrl . '</li>';

            }
        }

        if ($NavItems_custom) {

            $settings = trim($NavItems_custom);
            $settings = explode("\n", $settings);
            $settings = array_filter($settings, 'trim');

            $rootUrl = rtrim($this->config->urls->admin, '/');
            $rootUrlHttp = $this->config->urls->httpAdmin;

            foreach ($settings as $pairs) {

                if (strpos($pairs, '//') === 0) {
                    continue;
                }

                // replace rootUrlHttp to avoid having ':' before explode
                $pairs = str_replace($rootUrlHttp, '', $pairs);

                if (strpos($pairs, ':') === false) {
                    continue;
                }

                $setting = explode(':', $pairs);

                $title = isset($setting[0]) ? trim($setting[0]) : null;
                $url = isset($setting[1]) ? trim($setting[1]) : null;

                if (is_null($title) || is_null($url)) {
                    continue;
                }

                // if title starts with "!" then only SuperUsers should see
                if ($title[0] == '!') {
                    if (!$this->user->isSuperUser()) {
                        continue;
                    }
                    // trim and add * to indicate it's admin only
                    $title = ltrim($title, '!') . "*";
                }

                $url = ltrim($url, '/');

                $activeClass = (strpos($_SERVER['REQUEST_URI'], $url) !== false) ? ' current' : '';

                $linkUrl = '<a href="' . $rootUrl . '/' . $url . '" class="page-list' . $activeClass . '">' . $title . '</a>';
                $items .= '<li class="navItem">' . $linkUrl . '</li>';
            }

        }

        if ($items == "") {
            return false;
        }

        $items = '<ul class="NavItems" style="display: none;">' . $items . '</ul>';

        $event->return = str_replace('</body>', $items . '</body', $event->return);
    }

    public function getFormattedOptionName($obj) {
        return !empty($obj->label) ? $obj->label . ' (' . $obj->name . ')' : $obj->name;
    }

    public function setupAdminColumnsTabs($fields, $form) {

        $dataColumnBreaks = array();

        foreach ($fields as $f) {

            // add data-attributes fo JS
            $notes = $f->notes;

            if (empty($notes)) {
                // try default notes (PW bug with overrides?)
                $notes = $this->fields->get($f->name)->notes;
            }

            if (!empty($notes)) {
                $notes = trim($notes);

                if (strpos($notes, 'colbreak_') !== 0) {
                    return;
                }

                $notes = str_replace('colbreak_', '', $notes);

                if (strpos($notes, ':') !== false) {
                    $notes = array_map('trim', explode(':', $notes));
                } else {
                    $notes = array($notes, 67);
                }
                $dataColumnBreaks[$f->name] = $notes;
            }
        }

        if (!empty($dataColumnBreaks)) {
            $form->wrapAttr('data-column-break', json_encode($dataColumnBreaks));
        }

    }


    public function setupAdminColumns(HookEvent $event) {

        $form = $event->return;
        $fields = $form->children();
        $colBreakField = $fields->get('aos_column_break');
        $colWidths = array(67, 33);
        $tabOpenFields = $fields->find('hasFieldtype=FieldtypeFieldsetTabOpen');

        if ($tabOpenFields->count()) {
            $this->setupAdminColumnsTabs($tabOpenFields, $form);
        }

        if (!$colBreakField) {
            return false;
        }

        // stop if colBreakField is inside a tab
        $tabSeen = false;

        foreach ($fields as $field) {

            if ($field->hasFieldtype == 'FieldtypeFieldsetTabOpen') {
                $tabSeen = true;
            }

            if ($field->name == $colBreakField->name) {

                if ($tabSeen) {
                    // there was a TabOpen field first, remove colBreakField and stop
                    $form->remove($colBreakField);

                    return false;

                } else {
                    // colBreakField is not inside a tab
                    break;
                }
            }
        }

        if ($colBreakField->columnWidth) {
            $colWidths = array($colBreakField->columnWidth, 100 - $colBreakField->columnWidth);
        }

        $fsetLeft = $this->modules->get("InputfieldFieldset");
        $fsetLeft->attr('class', $fsetLeft->attr('class') . ' aos_col_left');
        $fsetLeft->wrapAttr('style', 'width: ' . $colWidths[0] . '%');

        $fsetRight = $this->modules->get("InputfieldFieldset");
        $fsetRight->attr('class', $fsetRight->attr('class') . ' aos_col_right');
        $fsetRight->wrapAttr('style', 'width: ' . $colWidths[1] . '%');

        $this->modules->get('FieldtypeFieldsetClose');
        if (class_exists('\ProcessWire\InputfieldFieldsetClose')) {
            $fsetLeftEnd = new \ProcessWire\InputfieldFieldsetClose;
            $fsetRightEnd = new \ProcessWire\InputfieldFieldsetClose;
        } else {
            $fsetLeftEnd = new InputfieldFieldsetClose;
            $fsetRightEnd = new InputfieldFieldsetClose;
        }

        $fsetLeftEnd->name = 'aos_col_left' . FieldtypeFieldsetOpen::fieldsetCloseIdentifier;
        $fsetRightEnd->name = 'aos_col_right' . FieldtypeFieldsetOpen::fieldsetCloseIdentifier;

        $fset = $fsetLeft;
        $rightItems = false;

        foreach ($fields as $f) {

            // stop on first Tab field
            if ($f->hasFieldtype == 'FieldtypeFieldsetTabOpen') {
                break;
            }

            // if colBreakField reached, remove it and start adding fields to the right column
            if (!$rightItems && $f == $colBreakField) {
                $form->remove($colBreakField);
                $fset = $fsetRight;
                $rightItems = true;
                continue;
            }

            $fset->add($form->get($f->name));
            $form->remove($form->get($f->name));
        }

        $form->add($fsetLeft);
        $form->add($fsetLeftEnd);

        $form->add($fsetRight);
        $form->add($fsetRightEnd);
    }


    public function addDownloadAssetLink(HookEvent $event) {

        $markup = $event->return;
        $url = $event->arguments[0]->url;

        $downloadLink = '<a href="' . $url . '" target="_blank" class="aos_downloadAsset" download title="' . __('Download', __FILE__) . '"><i class="fa fa-download"></i></a>';

        $markup = $downloadLink . $markup;

        $event->return = $markup;
    }


    public function addTemplateEditLink(HookEvent $event) {


        if (!$this->editedPage || $this->editedPage->template == 'admin') {
            return;
        }

        $template = $this->editedPage->template;

        $target = isset(self::$configData['FieldAndTemplateEditLinks']) ? self::$configData['FieldAndTemplateEditLinks'] : '';

        $target = ($target === 'pw-panel') ? $target . ' pw-panel-reload' : $target;

        $templateEditUrl = $this->config->urls->admin . 'setup/template/edit?id=' . $template->id;
        $templateEditLink = '<a href="' . $templateEditUrl . '" class="aos_EditTemplate ' . $target . '" target="_blank">' . $template->name . '<i class="fa fa-pencil"></i></a>';


        if ($this->adminTheme == 'AdminThemeDefault') {
            $event->return = str_replace('<li class=\'title\'>', '<li class="title">' . $templateEditLink, $event->return);
        } else {
            // add span (on some templates it's missing)
            $event->return = str_replace('<h1 id="title">', '<h1 id="title"><span>', $event->return);
            $event->return = str_replace('</h1>', '</span></h1>', $event->return);

            $event->return = str_replace('</span></h1>', '</span>' . $templateEditLink . '</h1>', $event->return);
        }
    }


    public function addFieldEditLinks(HookEvent $event) {

        $inputfield = $event->object;

        if ($inputfield->type == 'hidden') {
            return;
        }

        if (strpos($event->return, 'data-editurl')) {
            return;
        }

        if ($field = $this->fields->get($inputfield->name)) {

            // add class to wrapper to be able to use :hover even if label is unavailable (eg. checkbox field)
            $inputfield->wrapAttr('class', $inputfield->wrapAttr('class') . ' aos_hasTooltip');


            $editFieldUrl = $this->config->urls->admin . 'setup/field/edit?id=' . $field->id;

            $editFieldTooltip = '<em class="aos_EditField">' . $inputfield->name . '<i class="fa fa-pencil"></i></em>';

            // needed to allow HTML in label
            $inputfield->entityEncodeLabel = false;
            $inputfield->label = '<span class="title">' . $editFieldTooltip . $inputfield->label . '</span>';

            // use hidden link to be able to use modal/panel
            // note: link is not added to the label tag because it won't be clickable

            $target = isset(self::$configData['FieldAndTemplateEditLinks']) ? self::$configData['FieldAndTemplateEditLinks'] : '';

            $target = ($target === 'pw-panel') ? $target . ' pw-panel-reload' : $target;

            // add tooltip if there's no label (checkbox)
            if ($inputfield instanceof InputfieldCheckbox) {
                $event->return = str_replace('</label>', $editFieldTooltip . '</label>', $event->return);
            }

//            $inputfield->prependMarkup = '<a href="' . $editFieldUrl . '" class="' . $target . ' aos_EditFieldLink" target="_blank" style="display: none !important;">Edit</a>';
            $event->return .= '<a href="' . $editFieldUrl . '" class="' . $target . ' aos_EditFieldLink" data-field-name="' . $inputfield->name . '" target="_blank" style="display: none !important;">Edit</a>';
        }
    }


    public function addPageListUnselectButtons(HookEvent $event) {

        $field = $event->object;

        $pageIDstring = '';
        $originalTitle = ($field->value && $this->pages->get($field->value)) ? $this->pages->get($field->value)->title : '';

        if (isset($this->PageListTweaks) && in_array('pListIDs', $this->PageListTweaks) && $this->user->isSuperUser()) {
            $originalID = ($field->value && $this->pages->get($field->value)) ? $this->pages->get($field->value)->id : '';
            $pageIDstring = isset($originalID) ? htmlentities('<sup class="pageId">' . $originalID . '</sup>') : '';
        }

        $restoreTitleTag = strlen($originalTitle) ? 'title="' . __('Restore', __FILE__) . ' &quot;' . $originalTitle . '&quot;"' : '';

        $clearButton = '<button class="aos_pagelist_unselect clear ui-button ' . ($field->value ? '' : 'empty') . '" title="' . __('Clear', __FILE__) . '"><i class="fa fa-times-circle"></i></button>';

        $restoreButton = $field->value ? '<button class="aos_pagelist_unselect restore ui-button initial" ' . $restoreTitleTag . ' data-title-original="' . $originalTitle . $pageIDstring . '" data-value-original="' . $field->value . '" ><i class="fa fa-undo"></i></button>' : '';

        $event->return = $restoreButton . $clearButton . $event->return;
    }


    public function addIUCLink(HookEvent $event) {

        $inputfield = $event->object;
        $url = $inputfield->value ? $inputfield->value : '';

        // if url is an array, it's a simple pageautocomplete field (not FieldtypeAssistedURL)
        // https://github.com/rolandtoth/AdminOnSteroids/issues/13
        if (is_array($url)) {
            return false;
        }

        $configData = self::$configData;
        $editedPage = $this->editedPage;
        $editLinkAttrsArray = array();
        $editLinkAttrs = '';


        if (!empty($configData['IUC_enabledTemplates']) && !in_array($editedPage->template->name, $configData['IUC_enabledTemplates'])) {
            return false;
        }

        if (!empty($configData['IUC_enabledFields']) && !in_array($inputfield->name, $configData['IUC_enabledFields'])) {
            return false;
        }


        // process locked fields
        if (in_array($inputfield->collapsed, array(7, 8))) {
            $target = isset($configData['IUC_target']) ? $configData['IUC_target'] : '';
            $target = ($target === 'pw-panel') ? $target . ' pw-panel-reload' : $target;
            $event->return = '<a href="' . $event->return . '" target="_blank" class="iuc iuc-locked-link ' . $target . '">' . $event->return . '</a>';

            return true;
        }


        if (isset($configData['IUC_mode'])) {

            $mode = implode(',', $configData['IUC_mode']);

            $editLinkAttrsArray['data-iuc-mode'][] = $mode;

            if (in_array('button', $configData['IUC_mode'])) {
                $buttonPosition = isset($configData['IUC_buttonPosition']) ? $configData['IUC_buttonPosition'] : '';
                $editLinkAttrsArray['class'][] = 'iuc iuc-button ' . $buttonPosition;
            } else {
                $editLinkAttrsArray['class'][] = 'iuc iuc-hidden';
            }
        }

        if (isset($configData['IUC_target'])) {

            // add wrap class for repeaters (only if mode is pw-panel)

            if ($configData['IUC_target'] === 'pw-panel' && strpos($inputfield->attr('id'), '_repeater') !== false) {
                $inputfield->wrapAttr('class', $inputfield->wrapAttr('class') . ' pw-panel-items');
            }

            $editLinkAttrsArray['class'][] = $configData['IUC_target'];

            if ($configData['IUC_target'] === 'pw-panel') {
                // disable load on hover
                $editLinkAttrsArray['class'][] = 'pw-panel-reload';
            }
        }

        if (isset($configData['IUC_forceHttp']) && $configData['IUC_forceHttp'] == 1) {
            $editLinkAttrsArray['data-iuc-force-http'][] = 1;
        }

        foreach ($editLinkAttrsArray as $attr_name => $values) {
            $editLinkAttrs .= $attr_name . '="' . implode(' ', $values) . '" ';
        }

        // add CSS class for easier selection
        $inputfield->addClass('iuc-input');

        $editLinkMarkup = '<a href="' . $url . '"' . $editLinkAttrs . ' target="_blank"><i class="fa fa-arrow-right"></i></a>';

        $event->return = $editLinkMarkup . $event->return;

        return false;
    }


    // add template name to title
    public function addTemplateLinkPageList(HookEvent $event) {

        $page = $event->arguments('page');

        $template = $page->template;

        $target = isset(self::$configData['FieldAndTemplateEditLinks']) ? self::$configData['FieldAndTemplateEditLinks'] : '';

        $target = ($target === 'pw-panel') ? $target . ' pw-panel-reload' : $target;

        $templateEditUrl = $this->config->urls->admin . 'setup/template/edit?id=' . $template->id;
        $templateEditLink = '<a href="' . $templateEditUrl . '" class="aos_EditTemplate ' . $target . '" target="_blank">' . $template->name . '<i class="fa fa-pencil"></i></a>';

        $event->return = str_replace('</span>', $templateEditLink . '</span>', $event->return);
    }


    public function addPageListThumb(HookEvent $event) {

        $page = $event->arguments('page');
        $field = null;

        // intentional "="
        if (!($settings = $this->getPagePageListThumbs_options())) {
            return false;
        }
        if (!is_array($settings)) {
            return false;
        }

        foreach ($settings as $pairs) {

            if (strpos($pairs, '//') === 0) {
                continue;
            }

            $setting = explode(':', $pairs);

            $f = isset($setting[0]) ? trim($setting[0]) : null;
            $selector = isset($setting[1]) ? trim($setting[1]) : null;

            if (is_null($f) || !$page->$f || (!$page->$f instanceof Pageimage && !$page->$f instanceof Pageimages) || count($page->$f) == 0) {
                continue;
            }

            if (is_null($selector)) {
                // break if there's no selector (any page will match)
                $field = $f;
                break;

            } elseif ($page->is($selector)) {
                // break if page matches
                $field = $f;
                break;
            }
        }

        if (is_null($field)) {
            return false;
        }

        $field = ($page->$field instanceof Pageimages) ? $page->$field->first() : $page->$field;

        $classes = array();

        $thumbSize = ($this->adminTheme == 'AdminThemeDefault' || ($this->RenoTweaks && in_array('pListCompact', $this->RenoTweaks))) ? 32 : 48;

        if (isset($this->PageListThumbs_style) && !empty($this->PageListThumbs_style)) {
            $classes[] = $this->PageListThumbs_style;
        }

        if (in_array('square', $classes)) {
//                $thumbSrc = $field->size($thumbSize, $thumbSize, array('cropping' => false))->url;
            $thumbSrc = $field->size($thumbSize, $thumbSize, array('cropping' => true))->url;
//                $thumbSrc = $field->size($thumbSize, $thumbSize, array('cropping' => true, 'forceNew' => true))->url;
        } else {
            $thumbSrc = $field->height($thumbSize)->url;
        }

        $PageListThumbs_options = isset($this->PageListThumbs_options) ? $this->PageListThumbs_options : null;


        $img = '<img src="' . $thumbSrc . '" />';

        if (!is_null($PageListThumbs_options)) {

            if (in_array('alignright', $PageListThumbs_options)) {
                $classes[] = 'alignright';
            }

            if (in_array('addlink', $PageListThumbs_options)) {

                $classes[] = 'addlink';

                $img = '<a href="' . rtrim($this->config->urls->httpRoot, '/') . $page->editUrl() . '" class="aos_pageListLink">' . $img . '</a>';
            }
        }

        if (!empty($classes)) {
            $classes = implode(' ', $classes);
        }


        $event->return = '<figure class="' . $classes . '">' . $img . '</figure>' . $event->return;

        return true;
    }


    public function getPagePageListThumbs_options() {

        if ($this->PageListThumbs_items) {
            return $this->PageListThumbs_items;
        }

        $PageListThumbs_options = isset($this->data['PageListThumbs_items']) ? $this->data['PageListThumbs_items'] : null;

        if (is_null($PageListThumbs_options)) {
            return false;
        }

        // build settings array
        $settings = trim($PageListThumbs_options);
        $settings = explode("\n", $settings);
        $settings = array_filter($settings, 'trim');

        $this->PageListThumbs_items = $settings;

        return $settings;
    }

    public function addAdminLangSwitcher(HookEvent $event) {

        if ($this->languages && $this->pages->find('template=language, check_access=0')->count() > 1) {

            $parts = $event->return;

            $lang_items = '';
            $userLangId = $this->user->language->id;

            foreach ($this->languages as $lang) {
                $activeClass = $lang->id == $userLangId ? ' class="active"' : '';
                $lang_items .= '<li' . $activeClass . '><a href="' . $_SERVER['REQUEST_URI'] . '" data-lang-id="' . $lang->id . '"><span class="lang-title">' . $lang->title . '</span> <span class="lang-name">' . $lang->name . '</span></a></li>';
            }

            $parts['masthead'] .= '<li class="aos_adminLangSwitcher" style="display: none;"><a href="#">' . $this->user->language->title . '</a><ul>' . $lang_items . '</ul></li>';

            $event->return = $parts;
        }
    }


    public function addRoleFields($submoduleName, $data, $parent) {

        $f = wire('modules')->get("InputfieldAsmSelect");
        $f->attr('name', $submoduleName . 'Roles');
        $f->label = __($submoduleName . ' roles', __FILE__);
        $f->skipLabel = Inputfield::skipLabelHeader;
        $f->attr('data-asm-placeholder', __('ROLES', __FILE__));
        $f->showIf = 'enabledSubmodules=' . $submoduleName;
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOptions($this->allRoles);

        if (isset($data[$f->name])) {
            $f->attr('value', $data[$f->name]);
        }

        $parent->add($f);
    }

    public function getModuleConfigInputfields(array $data) {

        $defaultData = self::getDefaultData();
        $data = array_merge(self::getDefaultData(), $data);

        // exception to ListerTweaks: use "[DEFAULTS]" if empty
        if (empty($data['ListerTweaks_find'])) $data['ListerTweaks_find'] = array('[DEFAULTS]');
        if (empty($data['ListerTweaks_users'])) $data['ListerTweaks_users'] = array('[DEFAULTS]');

        $wrapper = new InputfieldWrapper();

        // Enable module ----------------------------------------------- //

        $f = wire('modules')->get('InputfieldCheckbox');
        $f->name = 'enabled';
        $f->label = __('Enable module', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;
        $f->attr('value', $data[$f->name]);

        $f->checked = ($f->value == 1) ? 'checked' : '';

        $wrapper->add($f);


        // Submodules ----------------------------------------------- //

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'enabledSubmodules');
//        $f->wrapAttr('style', 'display: none;');
        $f->label = __('Submodules', __FILE__);
        $f->description = __('Enable or disable submodules here.', __FILE__);
//        $f->showIf      = 'enabled=1';
        $f->collapsed = Inputfield::collapsedNever;
//        $f->table = true;

        $f->addOption('AdminColumns', '**AdminColumns**' . __('Add `aos_column_break` field to create admin columns', __FILE__));
        $f->addOption('AdminLangSwitcher', '**AdminLangSwitcher**' . __('Add language switcher to the admin', __FILE__));
        $f->addOption('AdminTweaks', '**AdminTweaks**' . __('Default admin theme tweaks', __FILE__));
        $f->addOption('AsmTweaks', '**AsmTweaks**' . __('asmSelect tweaks', __FILE__));
        $f->addOption('AutosizeTextareas', '**AutosizeTextareas**' . __('Autosize textareas according to content', __FILE__));
        $f->addOption('CKEaddons', '**CKEaddons**' . __('Autoload CKEditor plugins and skins', __FILE__));
        $f->addOption('DeselectRadios', '**DeselectRadios**' . __('Enable clearing checked radio buttons', __FILE__));
        $f->addOption('FieldAndTemplateEditLinks', '**FieldAndTemplateEditLinks**' . __('Add shortcut links to templates and fields (SuperUser only)', __FILE__));
        $f->addOption('FileFieldTweaks', '**FileFieldTweaks**' . __('File and image field enhancements', __FILE__));
        $f->addOption('FocusInputOnLangTabSwitch', '**FocusInputOnLangTabSwitch**' . __('Focus input on switching language tabs', __FILE__));
        $f->addOption('Hotkeys', '**Hotkeys**' . __('Hotkey tweaks', __FILE__));
        $f->addOption('HoverDropdown', '**HoverDropdown**' . __('Show save dropdown on hover instead on click', __FILE__));
        $f->addOption('InputfieldURLChecker', '**InputfieldURLChecker**' . __('Add button or hotkey to check URL', __FILE__));
        $f->addOption('LangTabHotkeySwitcher', '**LangTabHotkeySwitcher**' . __('Switch language tabs on ctrl+arrow keys', __FILE__));
        $f->addOption('LongClickDuration', '**LongClickDuration**' . __('Custom long-click action duration', __FILE__));
        $f->addOption('ListerTweaks', '**ListerTweaks**' . __('Lister enhancements', __FILE__));
        $f->addOption('Misc', '**Misc**' . __('Miscellaneous tweaks', __FILE__));
        $f->addOption('ModuleTweaks', '**ModuleTweaks**' . __('Module related tweaks (SuperUser only)', __FILE__));
        $f->addOption('NavItems', '**NavItems**' . __('Add pages to navigation', __FILE__));
        $f->addOption('noAnim', '**noAnim**' . __('Disable all admin animations', __FILE__));
        $f->addOption('PageListThumbs', '**PageListThumbs**' . __('Add pagelist thumbnails', __FILE__));
        $f->addOption('PageListTweaks', '**PageListTweaks**' . __('Pagelist related tweaks', __FILE__));
        $f->addOption('PageListUnselect', '**PageListUnselect**' . __('Add unselect/restore buttons to PageListSelect', __FILE__));
        $f->addOption('PagePreviewBtn', '**PagePreviewBtn**' . __('Add preview link next to page title', __FILE__));
        $f->addOption('RenoTweaks', '**RenoTweaks**' . __('Reno admin theme tweaks', __FILE__));
        $f->addOption('TabIndex', '**TabIndex**' . __('Add sequential tabindex to fields', __FILE__));
        $f->addOption('Tooltips', '**Tooltips**' . __('Move field descriptions and notes to tooltips', __FILE__));

        $f->attr('value', isset($data[$f->name]) ? $data[$f->name] : $defaultData[$f->name]);

        $wrapper->add($f);


        // Tweaks Fieldset ----------------------------------------------- //

        $fset = wire('modules')->get("InputfieldFieldset");
        $fset->attr('name', 'tweaks');
//        $fset->showIf    = 'enabled=1';
        $fset->label = __('Submodule options', __FILE__);
        $fset->collapsed = Inputfield::collapsedNever;


        // AdminTweaks ----------------------------------------------- //

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'AdminTweaks');
        $f->label = __('AdminTweaks', __FILE__);
        $f->showIf = 'enabledSubmodules=AdminTweaks';
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('headSticky', __('Sticky header', __FILE__));
        $f->addOption('wide', __('Set wider main content', __FILE__));
        $f->addOption('pListFullRowHover', __('Show pagelist actions on full row hover', __FILE__));

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);


        // AsmTweaks ----------------------------------------------- //

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'AsmTweaks');
        $f->showIf = 'enabledSubmodules=AsmTweaks';
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('asmCollapse', __('Collapse fieldset/tab items on double click', __FILE__));
        $f->addOption('asmLeftX', __('Move delete button to the left', __FILE__));
        $f->addOption('fieldMiddleEdit', __('Edit field in new tab on middle click (no template context)', __FILE__));

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);


        // CKEaddons ----------------------------------------------- //

        $fsetCKE = wire('modules')->get("InputfieldFieldset");
        $fsetCKE->attr('name', 'CKEaddons');
        $fsetCKE->label = __('CKEaddons', __FILE__);
        $fsetCKE->showIf = 'enabledSubmodules=CKEaddons';
//        $fsetCKE->collapsed = Inputfield::collapsedNever;

        // Plugins
        $f = wire('modules')->get('InputfieldAsmSelect');
        $f->name = 'CKEaddons_plugins';
        $f->label = __('Plugins', __FILE__);
        $f->description = __('Plugins marked with asterisk add toolbar items.', __FILE__);

        $f->collapsed = Inputfield::collapsedNever;

        $addsToolbarButtonText = '*';

        $f->addOption('autogrow', 'Auto Grow');
        $f->addOption('autolink', 'Auto Link');
        $f->addOption('autosave', 'Auto Save');
        $f->addOption('codemirror', 'CodeMirror');
        $f->addOption('div', 'Div' . $addsToolbarButtonText);
        $f->addOption('find', 'Find' . $addsToolbarButtonText);
//        $f->addOption('floating-tools', 'Floating tools*');
        $f->addOption('justify', 'Justify' . $addsToolbarButtonText);
        $f->addOption('keystrokes', 'Keystrokes');
        $f->addOption('magicline', 'Magic Line');
        $f->addOption('maximize', 'Maximize' . $addsToolbarButtonText);
        $f->addOption('oembed', 'Media (oEmbed)' . $addsToolbarButtonText);
        $f->addOption('showblocks', 'Show Blocks' . $addsToolbarButtonText);
        $f->addOption('ckeditortablecellsselection', 'Table Cells Selection');

        if (isset($data[$f->name]) && $data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetCKE->add($f);

        // Enabled fields
        $cke_fields = $this->fields->find('inputfieldClass=InputfieldCKEditor');

        $f = wire('modules')->get('InputfieldAsmSelect');
        $f->name = 'CKEaddons_enabledFields';
        $f->label = __('Enabled fields (for plugins only)', __FILE__);
//        $f->description = __('Note: selected fields will restrict plugins only and not the skin.', __FILE__);
        $f->attr('data-asm-placeholder', __('Add fields...', __FILE__));
        $f->collapsed = Inputfield::collapsedNever;
        $f->columnWidth = 66;

        foreach ($cke_fields as $cke_field) {
            $f->addOption($cke_field->name, self::getFormattedOptionName($cke_field));
        }

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetCKE->add($f);

        // Skin
        $f = wire('modules')->get('InputfieldRadios');
        $f->name = 'CKEaddons_skin';
        $f->label = __('CKEditor skin', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;
        $f->optionColumns = 3;

        $f->addOption('default', 'default');
        $f->addOption('lightwire', 'LightWire');

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetCKE->add($f);

        $fset->add($fsetCKE);


        // ListerTweaks ----------------------------------------------- //

        // system labels + id, path
        $extraFieldNames = array(
            'id',
            'name',
            'path',
            'status',
            'template',
            'templates_id',
            'modified',
            'created',
            'published',
            'modified_users_id',
            'created_users_id',
            'parent',
            'num_children',
        );

        $fsetLT = wire('modules')->get("InputfieldFieldset");
        $fsetLT->attr('name', 'ListerTweaks');
        $fsetLT->label = __('ListerTweaks', __FILE__);
        $fsetLT->showIf = 'enabledSubmodules=ListerTweaks';

        // Find lister

        $f = wire('modules')->get('InputfieldAsmSelect');
        $f->name = 'ListerTweaks_find';
        $f->label = __('Find lister columns', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;

        $lister_fieldnames = $this->wire('fields')->find('type!=FieldtypeFieldsetOpen|FieldtypeFieldsetClose|FieldtypeFieldsetTabOpen|FieldtypeFieldsetTabClose, sort=label')->name();
        $lister_fieldnames = array_merge($lister_fieldnames, $extraFieldNames);
        natcasesort($lister_fieldnames);

        array_unshift($lister_fieldnames, '[DEFAULTS]');

        foreach ($lister_fieldnames as $fieldname) {
            $f->addOption($fieldname);
        }

        if (isset($data[$f->name]) && $data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetLT->add($f);

        $fset->add($fsetLT);

        // User lister

        $f = wire('modules')->get('InputfieldAsmSelect');
        $f->name = 'ListerTweaks_users';
        $f->label = __('Users lister columns', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;

        $lister_fieldnames = $this->wire('templates')->get('user')->fields->find('name!=pass, sort=label')->name();
        $lister_fieldnames = array_merge($lister_fieldnames, $extraFieldNames);
        natcasesort($lister_fieldnames);

        array_unshift($lister_fieldnames, '[DEFAULTS]');

        foreach ($lister_fieldnames as $fieldname) {
            $f->addOption($fieldname);
        }

//        foreach ($lister_fieldnames as $ff) {
//            $f->addOption($ff->name, self::getFormattedOptionName($ff));
//        }

        if (isset($data[$f->name]) && $data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetLT->add($f);

        $fset->add($fsetLT);


        // DeselectRadios ----------------------------------------------- //

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'DeselectRadios');
        $f->collapsed = Inputfield::collapsedNever;
        $f->description = __('', __FILE__);
        $f->notes = __('', __FILE__);
        $f->showIf = 'enabledSubmodules=DeselectRadios';

        $f->addOption('allowRequired', __('Enable for required fields (not recommended)', __FILE__));

        $f->attr('value', isset($data[$f->name]) ? $data[$f->name] : $defaultData[$f->name]);

        $fset->add($f);

        // FieldAndTemplateEditLinks ----------------------------------------------- //

        $f = wire('modules')->get("InputfieldRadios");
        $f->attr('name', 'FieldAndTemplateEditLinks');
        $f->showIf = 'enabledSubmodules=FieldAndTemplateEditLinks';
        $f->collapsed = Inputfield::collapsedNever;
        $f->optionColumns = 3;

        $f->addOption('pw-blank', __('Open in new tab', __FILE__));
        $f->addOption('pw-panel', __('Open in panel', __FILE__));
        $f->addOption('pw-modal', __('Open in modal', __FILE__));

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        // FileFieldTweaks ----------------------------------------------- //

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'FileFieldTweaks');
        $f->showIf = 'enabledSubmodules=FileFieldTweaks';
        $f->collapsed = Inputfield::collapsedNever;
        $f->description = __('', __FILE__);
        $f->notes = __('', __FILE__);

        $f->addOption('filterbox', __('Filter box', __FILE__));
        $f->addOption('downloadAssetButton', __('Add asset download link', __FILE__));
        $f->addOption('imgSelectTitle', __('Add image titles to image select dialog', __FILE__));

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        // FocusInputOnLangTabSwitch ----------------------------------------------- //

        $f = wire('modules')->get("InputfieldRadios");
        $f->attr('name', 'FocusInputOnLangTabSwitch');
        $f->showIf = 'enabledSubmodules=FocusInputOnLangTabSwitch';
        $f->collapsed = Inputfield::collapsedNever;
        $f->description = __('', __FILE__);
        $f->notes = __('', __FILE__);

        $f->addOption('focus', __('Focus', __FILE__));
        $f->addOption('moveEnd', __('Move cursor to the end', __FILE__));
        $f->addOption('selectAll', __('Select all', __FILE__));
        $f->addOption('nothing', __('Do nothing', __FILE__));
        $f->optionColumns = 4;

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        $f = wire('modules')->get("InputfieldRadios");
        $f->attr('name', 'FocusInputOnLangTabSwitchCKE');
        $f->label = __('FocusInputOnLangTabSwitch CKE', __FILE__);
        $f->showIf = 'enabledSubmodules=FocusInputOnLangTabSwitch';
        $f->collapsed = Inputfield::collapsedNever;
        $f->description = __('', __FILE__);
        $f->notes = __('', __FILE__);

        $f->addOption('focus', __('Focus', __FILE__));
        $f->addOption('moveEnd', __('Move cursor to the end', __FILE__));
        $f->addOption('selectAll', __('Select all', __FILE__));
        $f->addOption('nothing', __('Do nothing', __FILE__));
        $f->optionColumns = 4;

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        // Hotkeys ----------------------------------------------- //

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'Hotkeys');
        $f->showIf = 'enabledSubmodules=Hotkeys';
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('save', __('Save on ctrl+s', __FILE__));
        $f->addOption('breadcrumbTweaks', __('Add long-click and ctrl+click actions to breadcrumbs', __FILE__));
        $f->addOption('focusSearch', __('Focus search on alt+d or double shift', __FILE__));

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        // InputfieldURLChecker ----------------------------------------------- //

        $fsetIUC = wire('modules')->get("InputfieldFieldset");
        $fsetIUC->attr('name', 'InputfieldURLChecker');
        $fsetIUC->label = __('InputfieldURLChecker', __FILE__);
        $fsetIUC->showIf = 'enabledSubmodules=InputfieldURLChecker';
//        $fsetIUC->collapsed = Inputfield::collapsedNever;

        // Mode
        $f = wire('modules')->get('InputfieldCheckboxes');
        $f->name = 'IUC_mode';
        $f->label = __('Mode', __FILE__);
        $f->columnWidth = 50;
        $f->collapsed = Inputfield::collapsedNever;
        $f->addOption('button', __('Button', 'IUC'));
        $f->addOption('ctrl-shift-click', __('Ctrl + Shift + Click', 'IUC'));
        $f->addOption('ctrl-shift-enter', __('Ctrl + Shift + Enter', 'IUC'));

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetIUC->add($f);

        // Mode - button
        $f = wire('modules')->get('InputfieldRadios');
        $f->name = 'IUC_buttonPosition';
        $f->label = __('Button position', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;
        $f->columnWidth = 50;
        $f->addOption('button-left', __('Left side of the field', 'IUC'));
        $f->addOption('button-right', __('Right side of the field', 'IUC'));
        $f->showIf = 'IUC_mode=button';
        $f->requiredIf = 'IUC_mode=button';

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetIUC->add($f);

        // Target
        $f = wire('modules')->get('InputfieldRadios');
        $f->name = 'IUC_target';
        $f->label = __('Open URL in...', __FILE__);
//        $f->notes     = __('Iframe mode fails if the target website does not allow iframe embed.', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;
        $f->addOption('pw-blank', __('new tab', __FILE__));
        $f->addOption('pw-modal', __('modal', __FILE__));
//        $f->addOption('pw-panel', __('panel', __FILE__));
        $f->optionColumns = 3;

//        $f->attr('value', isset($data[ $f->name ]) ? $data[ $f->name ] : $dataIUC[ $f->name ]);

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetIUC->add($f);

        $f = wire('modules')->get('InputfieldCheckbox');
        $f->name = 'IUC_forceHttp';
        $f->label = __('Force HTTP prefix', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;

        $f->attr('value', $data[$f->name]);

        $f->checked = ($f->value == 1) ? 'checked' : '';

        $fsetIUC->add($f);

        // Enabled templates
        $f = wire('modules')->get('InputfieldAsmSelect');
        $f->name = 'IUC_enabledTemplates';
        $f->label = __('Enabled templates', __FILE__);
        $f->attr('data-asm-placeholder', __('Add templates...', __FILE__));
        $f->collapsed = Inputfield::collapsedNever;
        $f->columnWidth = 50;

        foreach (wire('templates') as $t) {
            $f->addOption($t->name, self::getFormattedOptionName($t));
        }

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetIUC->add($f);


        // Enabled fields asmSelect
        $url_fields = wire('fields')->find('type=FieldtypeURL');

        // add asm select only if there is any URL type field

        if (count($url_fields) > 0) {

            $f = wire('modules')->get('InputfieldAsmSelect');
            $f->name = 'IUC_enabledFields';
            $f->label = __('Enabled fields', __FILE__);
            $f->collapsed = Inputfield::collapsedNever;
            $f->columnWidth = 50;

            foreach ($url_fields as $url_field) {
                $f->addOption($url_field->name, self::getFormattedOptionName($url_field));
            }

            $f->attr('data-asm-placeholder', __('Add fields...', __FILE__));

//            $f->attr('value', isset($data[ $f->name ]) ? $data[ $f->name ] : $dataIUC[ $f->name ]);
            if ($data[$f->name]) {
                $f->attr('value', $data[$f->name]);
            }

        } else {

            // add info that no URL type fields are available
            $f = wire('modules')->get('InputfieldMarkup');
            $f->name = 'no_url_fields';
            $f->label = __('Enabled fields', __FILE__);
            // doesn't work
            // $f->collapsed = Inputfield::collapsedNever;
            $f->markupText = __('There is no URL field available', __FILE__);
        }

        $fsetIUC->add($f);

        $fset->add($fsetIUC);

        // LongClickDuration ----------------------------------------------- //

        $f = wire('modules')->get("InputfieldText");
        $f->attr('name', 'LongClickDuration');
        $f->description = __('', __FILE__);
        $f->notes = __('', __FILE__);
        $f->showIf = 'enabledSubmodules=LongClickDuration';
        $f->attr('style', 'width: 100px; display: none !important;');
        $f->collapsed = Inputfield::collapsedNever;

        $f->attr('value', (isset($data[$f->name]) && (int)$data[$f->name] >= $defaultData[$f->name]) ? $data[$f->name] : $defaultData[$f->name]);

        $fset->add($f);

        // Misc ----------------------------------------------- //

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'Misc');
        $f->showIf = 'enabledSubmodules=Misc';
        $f->collapsed = Inputfield::collapsedNever;
        $f->description = __('', __FILE__);
        $f->notes = __('', __FILE__);

        $f->addOption('removeAllFieldsBtn', __('Add Remove All button to field deletion confirmation page', __FILE__));
        $f->addOption('centerLogin', __('Center login form', __FILE__));
        $f->addOption('homeOpenNewTab', __('Open Home/View site in new tab (topnav)', __FILE__));
        $f->addOption('dataTableFilter', __('Add filter box to AdminDataTables', __FILE__));
        $f->addOption('transFilter', __('Add filter box to Language Translator', __FILE__));

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        // ModuleTweaks ----------------------------------------------- //

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'ModuleTweaks');
        $f->showIf = 'enabledSubmodules=ModuleTweaks';
        $f->collapsed = Inputfield::collapsedNever;
        $f->description = __('', __FILE__);
        $f->notes = __('', __FILE__);

        $f->addOption('moduleCompact', __('Compact module list', __FILE__));
        $f->addOption('flatModules', __('Do not distribute modules into tabs', __FILE__));
        $f->addOption('loadCollapsedModuleInfos', __('Load module info fields collapsed', __FILE__));
        $f->addOption('moduleModal', __('Edit modules in modal on long-click', __FILE__));
        $f->addOption('moduleFilter', __('Add filter box to module list', __FILE__));
        $f->addOption('moduleBrowserTitle', __('Set browser title to module name', __FILE__));

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        // NavItems ----------------------------------------------- //

        $fsetCNI = wire('modules')->get("InputfieldFieldset");
        $fsetCNI->attr('name', 'NavItems');
        $fsetCNI->label = __('NavItems', __FILE__);
        $fsetCNI->showIf = 'enabledSubmodules=NavItems';
//        $fsetCNI->collapsed = Inputfield::collapsedNever;

        $f = wire('modules')->get('InputfieldPageListSelectMultiple');
        $f->name = 'NavItems_pages';
        $f->label = __('Select pages', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetCNI->add($f);


        $f = wire('modules')->get("InputfieldTextarea");
        $f->attr('name', 'NavItems_custom');
        $f->label = __('Custom items', __FILE__);
        $f->attr('placeholder', '// ! AdminOnSteroids: /module/edit?name=AdminOnSteroids');
        $f->rows = 3;
        $f->collapsed = Inputfield::collapsedNever;

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetCNI->add($f);


        $fset->add($fsetCNI);

        // PageListThumbs ----------------------------------------------- //

        $fsetPageListThumbs = wire('modules')->get("InputfieldFieldset");
        $fsetPageListThumbs->attr('name', 'PageListThumbs');
        $fsetPageListThumbs->label = __('PageListThumbs', __FILE__);
        $fsetPageListThumbs->showIf = 'enabledSubmodules=PageListThumbs';
//        $fsetPageListThumbs->collapsed = Inputfield::collapsedNever;


        $f = wire('modules')->get("InputfieldRadios");
        $f->attr('name', 'PageListThumbs_style');
        $f->label = __('Style', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('circle', __('circle', __FILE__));
        $f->addOption('square', __('square', __FILE__));
        $f->addOption('default', __('default', __FILE__));
        $f->optionColumns = 4;

        if (isset($data[$f->name])) {
            $f->attr('value', $data[$f->name]);
        } else {
            $f->attr('value', $data['PageListThumbs'][$f->name]);
        }

        $fsetPageListThumbs->add($f);


        $f = wire('modules')->get("InputfieldTextarea");
        $f->attr('name', 'PageListThumbs_items');
        $f->label = __('Source', __FILE__);
        $f->attr('placeholder', __('Enter field or field:selector pair(s)', __FILE__));
        $f->rows = 3;
        $f->collapsed = Inputfield::collapsedNever;

        if (isset($data[$f->name])) {
            $f->attr('value', $data[$f->name]);
        } else {
            $f->attr('value', $data['PageListThumbs'][$f->name]);
        }

        $fsetPageListThumbs->add($f);


        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'PageListThumbs_options');
        $f->label = __('Settings', __FILE__); // Thumb settings
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('alignright', __('Align thumbs to right', __FILE__));
        $f->addOption('addlink', __('Edit page on thumb click', __FILE__));

        if (isset($data[$f->name])) {
            $f->attr('value', $data[$f->name]);
        } else {
            $f->attr('value', $data['PageListThumbs'][$f->name]);
        }

        $fsetPageListThumbs->add($f);

        $fset->add($fsetPageListThumbs);

        // PageListTweaks ----------------------------------------------- //

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'PageListTweaks');
        $f->label = __('PageListTweaks', __FILE__);
        $f->showIf = 'enabledSubmodules=PageListTweaks';
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('highlightRows', __('Highlight rows on hover', __FILE__));
        $f->addOption('pListIDs', __('Show page IDs (SuperUser only)', __FILE__));
        $f->addOption('deleteBtn', __('Add Delete button to delete page permanently (SuperUser only)', __FILE__));

        if (isset($data[$f->name]) && $data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);


        // PagePreviewBtn ----------------------------------------------- //

        $f = wire('modules')->get("InputfieldRadios");
        $f->attr('name', 'PagePreviewBtn');
        $f->label = __('PagePreviewButton', __FILE__);
        $f->showIf = 'enabledSubmodules=PagePreviewBtn';
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('pw-blank', __('Preview in new tab', __FILE__));
        $f->addOption('pw-panel', __('Preview in panel', __FILE__));
        $f->addOption('pw-modal', __('Preview in modal', __FILE__));
        $f->optionColumns = 3;

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        // RenoTweaks ----------------------------------------------- //

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'RenoTweaks');
        $f->label = __('RenoTweaks', __FILE__);
        $f->showIf = 'enabledSubmodules=RenoTweaks';
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('headSticky', __('Sticky header', __FILE__));
        $f->addOption('headStickyCompact', __('Compact header', __FILE__));
        $f->addOption('stickyCKEBar', __('Sticky CKEditor toolbar', __FILE__));
        $f->addOption('miniScrollSb', __('Use mini scrollbar for sidebar', __FILE__));
        $f->addOption('miniScrollMain', __('Use mini scrollbar for main content', __FILE__));
        $f->addOption('sbSticky', __('Sticky sidebar', __FILE__));
        $f->addOption('sbItemsVisible', __('Always show sidebar items (disable accordion)', __FILE__));
        $f->addOption('sbSingleClickHeads', __('Single click navigation of sidebar headers', __FILE__));
        $f->addOption('sbItemsInline', __('Inline sidebar items', __FILE__));
        $f->addOption('sbQuickLinksHide', __('Hide sidebar quick links (flash icons)', __FILE__));
        $f->addOption('sbAutoHide', __('Autohide sidebar', __FILE__));
        $f->addOption('sbItemsRow', __('One-line sidebar submenus', __FILE__));
        $f->addOption('pListCompact', __('Use narrow pagelist rows', __FILE__));
        $f->addOption('openSearch', __('Always show search field', __FILE__));
        $f->addOption('headBtnToTitle', __('Place header button next to the main title', __FILE__));
        $f->addOption('hoverTopSubmenus', __('Show topnav submenus on hover instead click', __FILE__));
        $f->addOption('noticeLeftX', __('Move notice close buttons to the left', __FILE__));

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        // Tooltips ----------------------------------------------- //

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'Tooltips');
        $f->label = __('Tooltips', __FILE__);
        $f->showIf = 'enabledSubmodules=Tooltips';
        $f->collapsed = Inputfield::collapsedNever;
        $f->description = __('', __FILE__);
        $f->notes = __('', __FILE__);

//        $f->addOption('superuseronly', __('Only for SuperUsers', __FILE__));
        $f->addOption('tooltipDesc', __('Enable for field descriptions', __FILE__));
        $f->addOption('tooltipNotes', __('Enable for field notes', __FILE__));
        $f->addOption('tooltipOverlay', __('Use overlay style', __FILE__));

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        $wrapper->add($fset);


        // Assets paths

        $fsetPaths = wire('modules')->get("InputfieldFieldset");
        $fsetPaths->attr('name', 'AssetPaths');
        $fsetPaths->label = __('Asset Paths', __FILE__);

        $f = wire('modules')->get('InputfieldText');
        $f->name = 'AdminStyle';
        $f->label = __('Admin CSS', __FILE__);
        $f->description = __('Path to a CSS file to be loaded in the admin (relative to site root)', __FILE__);
//        $f->columnWidth = 50;
        $f->collapsed = Inputfield::collapsedBlank;

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetPaths->add($f);

        $f = wire('modules')->get('InputfieldText');
        $f->name = 'AdminScript';
        $f->label = __('Admin JavaScript', __FILE__);
        $f->description = __('Path to a JavaScript file to be loaded in the admin (relative to site root)', __FILE__);
//        $f->columnWidth = 50;
        $f->collapsed = Inputfield::collapsedBlank;

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetPaths->add($f);

        $f = wire('modules')->get('InputfieldText');
        $f->name = 'CKEStyle';
        $f->label = __('CKEaddons custom CSS', __FILE__);
        $f->description = __('Path to a CSS file to be loaded for CKEditors (relative to site root)', __FILE__);
//        $f->columnWidth = 50;
        $f->collapsed = Inputfield::collapsedBlank;

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }
        $fsetPaths->add($f);

        $f = wire('modules')->get('InputfieldText');
        $f->name = 'CKEScript';
        $f->label = __('CKEaddons custom configuration JavaScript', __FILE__);
        $f->description = __('Path to a JavaScript file to be loaded for CKEditors (relative to site root)', __FILE__);
//        $f->columnWidth = 50;
        $f->collapsed = Inputfield::collapsedBlank;

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }
        $fsetPaths->add($f);

        $wrapper->add($fsetPaths);


        // Restore settings checkbox

        $f = wire('modules')->get('InputfieldCheckbox');
        $f->name = 'restore';
        $f->label = __('Restore settings on next install', __FILE__);
//        $f->description = __('Enable saving module configuration data to file on uninstall to import it on next install.', __FILE__);
        $f->notes = __('Enable saving module configuration data to file on uninstall to import it on next install.', __FILE__) . ' ' . __('Make sure to save the module first when changing this value.', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;
        $f->value = $data[$f->name];

        $f->checked = ($f->value == 1) ? 'checked' : '';

        $wrapper->add($f);


        // add roles asmSelects

        // no need to add if module is disabled
        if ($this->enabled) {
            foreach ($defaultData['enabledSubmodules'] as $submodule) {
                if (in_array($submodule, array('FieldAndTemplateEditLinks', 'ModuleTweaks'))) {
                    continue;
                }
                $this->addRoleFields($submodule, $data, $wrapper);
            }
        }

        return $wrapper;
    }
}